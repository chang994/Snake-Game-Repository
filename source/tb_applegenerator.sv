/* Generated by Yosys 0.39 (git sha1 00338082b, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */
// Resources:
// https://www.chipverify.com/uvm/uvm-testbench-top

// All verification components, interfaces, and DUT are instantiated
// in a top-level module called "testbench"

// I created a separate test bench for the synchronizer but could have also created
// a top-level test-bench with both modules

module AppleGeneratorTestBench ();

logic [3:0] x, y, randX, randY;
logic goodColl, clk, reset, s_reset, apple;
logic [7:0][MAX_LENGTH:0]body;


//instantiate device being tested

applegenerator dut(x; y; randX; randY; goodColl; clk; reset; s_reset; body); // design under test module

initial begin

x = 5; y = 8; randX = 5; randY = 8; goodColl = 1; clk = 1; reset = 0; s_reset = 0; 
@(posedge clk);
assert (apple === 1) else $error("110 failed.")

x = 5; y =8; randX = 7; randY = 9; goodColl = 0; clk = 0; reset = 1; s_reset = 1; 
@(posedge clk);
assert (apple === 0) else $error("110 failed.")

x = 5; y = 8; randX = 5; randY = 8; goodColl = 0; clk = 0; reset = 1; s_reset = 1; 
@(posedge clk);
assert (apple === 0) else $error("110 failed.")

x = 5; y =8; randX = 7; randY = 9; goodColl = 1; clk = 1; reset = 0; s_reset = 0; 
@(posedge clk);
assert (apple === 1) else $error("110 failed.")

// Add more test cases below
$finish; 
end
endmodule
